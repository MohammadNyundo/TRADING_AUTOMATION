import MetaTrader5 as mt5
import pandas as pd
import time
import streamlit as st # type: ignore

# Title for the app
st.title("My First Trading Automation")

# Initialize MT5 connection
if not mt5.initialize():
    st.error(f"Failed to initialize, error code: {mt5.last_error()}")
else:
    st.success("MT5 initialized successfully")

# Display account information
account_info = mt5.account_info()
if account_info:
    st.write(f"Account Info: {account_info}")
else:
    st.error("Failed to retrieve account info")

# Select the EURUSD symbol
symbol = "EURUSDm"  # Use the mini version if available
if not mt5.symbol_select(symbol):
    st.error(f"Failed to select symbol: {symbol}, Error code: {mt5.last_error()}")
else:
    st.success(f"Symbol {symbol} selected")

    # Get last 100 bars of 1-minute data for EURUSD
    rates = mt5.copy_rates_from_pos(symbol, mt5.TIMEFRAME_M1, 0, 100)
    if rates is not None and len(rates) > 0:
        rates_df = pd.DataFrame(rates)
        if 'time' in rates_df.columns:
            rates_df['time'] = pd.to_datetime(rates_df['time'], unit='s')
            st.write(rates_df.head())
        else:
            st.warning("No 'time' column found in data")
    else:
        st.error(f"Failed to retrieve data for {symbol}")

    # Check for open positions
    open_positions = mt5.positions_get()
    if open_positions:
        st.write("Open Positions:", open_positions)
    else:
        st.info("No open positions.")

    # Define and send a trade request
    trade_request = {
        'action': mt5.TRADE_ACTION_DEAL,
        'symbol': symbol,
        'volume': 0.1,
        'type': mt5.ORDER_TYPE_SELL,
        'price': mt5.symbol_info_tick(symbol).ask,
        'deviation': 20,
        'magic': 234000,
        'comment': "Test sell order for EURUSD",
        'type_time': mt5.ORDER_TIME_GTC,
        'type_filling': mt5.ORDER_FILLING_IOC,
    }

    for attempt in range(5):
        result = mt5.order_send(trade_request)
        if result.retcode == mt5.TRADE_RETCODE_DONE:
            st.success(f"Order placed successfully, retcode: {result.retcode}")
            break
        else:
            st.error(f"Order failed, retcode: {result.retcode}. Retrying...")
            time.sleep(5)

# Shutdown MT5 connection
mt5.shutdown()
